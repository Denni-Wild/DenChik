from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

logger = logging.getLogger(__name__)
router = Router()


class MantraRecordingStates(StatesGroup):
    waiting_for_voice = State()


@router.callback_query(F.data == "record_mantra")
async def handle_record_mantra(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –º–∞–Ω—Ç—Ä—ã –≥–æ–ª–æ—Å–æ–º"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å –º–∞–Ω—Ç—Ä—É –≥–æ–ª–æ—Å–æ–º")
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º–∞–Ω—Ç—Ä—É –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–ì–æ–≤–æ—Ä–∏—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ —á–µ—Ç–∫–æ, —á—Ç–æ–±—ã –º–∞–Ω—Ç—Ä–∞ –∑–≤—É—á–∞–ª–∞ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ ‚ú®"
    )
    await state.set_state(MantraRecordingStates.waiting_for_voice)
    await callback.answer()


@router.callback_query(F.data == "order_voiceover")
async def handle_order_voiceover(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–∞—á–∏—Ç–∫–∏"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞—á–∏—Ç–∫—É")
    await callback.message.answer(
        "üéß –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—á–∏—Ç–∫–∞ –≤–∞—à–µ–π –º–∞–Ω—Ç—Ä—ã\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
        "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 24 —á–∞—Å–∞\n\n"
        "–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:\n"
        "- –ù–∞—á–∏—Ç–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∫—Ç–æ—Ä–æ–º\n"
        "- –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
        "- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—É–∫–∞\n"
        "- –§–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3"
    )
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
    await callback.answer()


@router.callback_query(F.data == "new_mantra")
async def handle_new_mantra(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π –º–∞–Ω—Ç—Ä—ã"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–∞–Ω—Ç—Ä—É")
    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–∞–Ω—Ç—Ä—É? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚ú®\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
    )
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏ (—Å–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å)
    await callback.answer()


@router.callback_query(F.data == "share_mantra")
async def handle_share_mantra(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–∞–Ω—Ç—Ä–æ–π"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–∞–Ω—Ç—Ä–æ–π")
    share_text = (
        "üåü –Ø –ø–æ–ª—É—á–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –º–∞–Ω—Ç—Ä—É –æ—Ç @your_bot_name!\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –º–∞–Ω—Ç—Ä—É –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–æ—Å—Ç–∞ ‚ú®"
    )
    await callback.message.answer(
        f"–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è sharing:\n\n{share_text}\n\n"
        "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!"
    )
    await callback.answer()


@router.callback_query(F.data == "favorite_mantra")
async def handle_favorite_mantra(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–Ω—Ç—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–Ω—Ç—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    await callback.message.answer(
        "‚ú® –ú–∞–Ω—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!\n"
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –º–∞–Ω—Ç—Ä—ã¬ª"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–∞–Ω—Ç—Ä—ã
@router.message(MantraRecordingStates.waiting_for_voice, F.voice)
async def handle_voice_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞–Ω—Ç—Ä–æ–π"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–Ω—Ç—Ä–æ–π")
    
    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    await message.answer(
        "üéô –í–∞—à–∞ –º–∞–Ω—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –º–∞–Ω—Ç—Ä—ã¬ª"
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
@router.message(MantraRecordingStates.waiting_for_voice)
async def handle_wrong_voice_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–∞–Ω—Ç—Ä—ã"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –º–∞–Ω—Ç—Ä–æ–π üéô"
    ) 