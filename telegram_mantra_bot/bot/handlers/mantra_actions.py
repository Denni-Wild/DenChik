from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from ..keyboards import (
    mantra_keyboard, my_mantras_keyboard, main_menu_keyboard,
    start_request_keyboard, request_keyboard, get_mantra_keyboard
)
from ..models import get_user_mantras, save_mantra, delete_mantra, get_mantra
import logging
from typing import Union
import tempfile, os, subprocess, speech_recognition as sr

logger = logging.getLogger(__name__)
router = Router()


class MantraRecordingStates(StatesGroup):
    waiting_for_voice = State()


@router.message(F.text == "üìÇ –ú–æ–∏ –º–∞–Ω—Ç—Ä—ã")
async def show_mantras(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–Ω—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–Ω—Ç—Ä")
    mantras = get_user_mantras(message.from_user.id)
    await message.answer(
        "–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞–Ω—Ç—Ä—ã:",
        reply_markup=my_mantras_keyboard(mantras)
    )


@router.message(F.text.in_(["‚ûï –ù–æ–≤–∞—è –º–∞–Ω—Ç—Ä–∞"]))
@router.callback_query(F.data == "start_new_mantra")
async def start_new_mantra(event: Union[types.Message, types.CallbackQuery]):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞–Ω—Ç—Ä—ã"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞–Ω—Ç—Ä—ã")
    text = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —á—É–≤—Å—Ç–≤–æ, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å?"
    
    if isinstance(event, types.CallbackQuery):
        await event.message.edit_text(text, reply_markup=start_request_keyboard())
        await event.answer()
    else:
        await event.answer(text, reply_markup=start_request_keyboard())


@router.callback_query(F.data == "back_to_mantras")
async def return_to_mantras(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞–Ω—Ç—Ä"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –º–∞–Ω—Ç—Ä")
    mantras = get_user_mantras(callback.from_user.id)
    await callback.message.edit_text(
        "–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞–Ω—Ç—Ä—ã:",
        reply_markup=my_mantras_keyboard(mantras)
    )


@router.callback_query(F.data == "back_to_main")
async def return_to_main(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )
    await callback.message.delete()


@router.callback_query(F.data == "back_to_request_start")
async def return_to_request_start(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω—Ç—Ä—ã"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω–∞—á–∞–ª—É —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–Ω—Ç—Ä—ã")
    await callback.message.edit_text(
        "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —á—É–≤—Å—Ç–≤–æ, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å?",
        reply_markup=start_request_keyboard()
    )


@router.callback_query(F.data.startswith("mantra_"))
async def show_mantra(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –º–∞–Ω—Ç—Ä—É"""
    mantra_id = int(callback.data.split('_')[1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∞–Ω—Ç—Ä—É {mantra_id}")
    mantra = get_mantra(mantra_id)
    if not mantra:
        await callback.answer("–ú–∞–Ω—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await callback.message.edit_text(
        f"‚ú® –í–∞—à–∞ –º–∞–Ω—Ç—Ä–∞:\n\n{mantra.text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=mantra_keyboard()
    )


@router.callback_query(F.data == "record_mantra")
async def handle_record_mantra(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –º–∞–Ω—Ç—Ä—ã –≥–æ–ª–æ—Å–æ–º"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å –º–∞–Ω—Ç—Ä—É –≥–æ–ª–æ—Å–æ–º")
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º–∞–Ω—Ç—Ä—É –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–ì–æ–≤–æ—Ä–∏—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ —á–µ—Ç–∫–æ, —á—Ç–æ–±—ã –º–∞–Ω—Ç—Ä–∞ –∑–≤—É—á–∞–ª–∞ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ ‚ú®"
    )
    await state.set_state(MantraRecordingStates.waiting_for_voice)
    await callback.answer()


@router.message(MantraRecordingStates.waiting_for_voice, F.voice)
async def handle_voice_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞–Ω—Ç—Ä–æ–π"""
    logger.info(f'[FSM] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–Ω—Ç—Ä–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}')
    if message.voice.duration == 0:
        await message.answer('–ü–æ—Ö–æ–∂–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –º–∞–Ω—Ç—Ä—É –µ—â—ë —Ä–∞–∑.')
        return
    with tempfile.TemporaryDirectory() as tmpdir:
        ogg_path = os.path.join(tmpdir, 'voice.ogg')
        wav_path = os.path.join(tmpdir, 'voice.wav')
        file = await message.bot.get_file(message.voice.file_id)
        await message.bot.download(file, destination=ogg_path)
        try:
            subprocess.run(['ffmpeg', '-y', '-i', ogg_path, wav_path], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            await message.answer('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ffmpeg.')
            return
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio_data, language='ru-RU')
                logger.info(f'[FSM] –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {text}')
                await message.answer(f'–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}')
            except sr.UnknownValueError:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.')
            except sr.RequestError:
                await message.answer('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')
    await message.answer(
        "üéô –í–∞—à–∞ –º–∞–Ω—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –º–∞–Ω—Ç—Ä—ã¬ª",
        reply_markup=mantra_keyboard()
    )
    await state.clear()


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    await message.answer(
        "üåü –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –ù–æ–≤–∞—è –º–∞–Ω—Ç—Ä–∞¬ª\n"
        "2. –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É\n"
        "3. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –º–∞–Ω—Ç—Ä—É\n"
        "5. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –µ—ë —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n\n"
        "–í—Å–µ –≤–∞—à–∏ –º–∞–Ω—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìÇ –ú–æ–∏ –º–∞–Ω—Ç—Ä—ã¬ª\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/mantras - –ú–æ–∏ –º–∞–Ω—Ç—Ä—ã"
    )


@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ / –û–ø–ª–∞—Ç–∞")
async def show_subscription(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ")
    await message.answer(
        "üí´ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫:\n"
        "- –ì–æ–ª–æ—Å–æ–≤–æ–º—É –≤–≤–æ–¥—É –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–∞—á–∏—Ç–∫–µ –º–∞–Ω—Ç—Ä\n"
        "- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        "–ú–µ—Å—è—Ü - 1000‚ÇΩ\n"
        "–ì–æ–¥ - 9000‚ÇΩ"
    )
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "- –Ø–∑—ã–∫\n"
        "- –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å"
    )
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–∞–Ω—Ç—Ä—ã ---

@router.callback_query(F.data == "show_text")
async def show_mantra_text(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –º–∞–Ω—Ç—Ä—ã"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –º–∞–Ω—Ç—Ä—ã")
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –º–∞–Ω—Ç—Ä—ã –∏–∑ –ë–î
    await callback.message.edit_text(
        "‚ú® –¢–µ–∫—Å—Ç –≤–∞—à–µ–π –º–∞–Ω—Ç—Ä—ã:\n\n"
        "[–¢–µ–∫—Å—Ç –º–∞–Ω—Ç—Ä—ã]\n\n"
        "–ö–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=mantra_keyboard()
    )


@router.callback_query(F.data == "play_recording")
async def play_mantra_recording(callback: types.CallbackQuery):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –º–∞–Ω—Ç—Ä—ã"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –∑–∞–ø–∏—Å—å –º–∞–Ω—Ç—Ä—ã")
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
    await callback.message.answer("üéß –í–∞—à–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω–∞—è –º–∞–Ω—Ç—Ä–∞:")
    # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ
    await callback.answer()


@router.callback_query(F.data == "edit_mantra")
async def edit_mantra(callback: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –º–∞–Ω—Ç—Ä—ã"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–Ω—Ç—Ä—É")
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –º–∞–Ω—Ç—Ä—ã:"
    )
    # TODO: –î–æ–±–∞–≤–∏—Ç—å FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


@router.callback_query(F.data == "order_voiceover")
async def handle_order_voiceover(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–∞—á–∏—Ç–∫–∏"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞—á–∏—Ç–∫—É")
    await callback.message.answer(
        "üéß –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—á–∏—Ç–∫–∞ –≤–∞—à–µ–π –º–∞–Ω—Ç—Ä—ã\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
        "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 24 —á–∞—Å–∞\n\n"
        "–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:\n"
        "- –ù–∞—á–∏—Ç–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∫—Ç–æ—Ä–æ–º\n"
        "- –ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
        "- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—É–∫–∞\n"
        "- –§–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3"
    )
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
    await callback.answer()


@router.callback_query(F.data == "delete_mantra")
async def delete_mantra(callback: types.CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –º–∞–Ω—Ç—Ä—É"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å –º–∞–Ω—Ç—Ä—É")
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –º–∞–Ω—Ç—Ä—É?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
                InlineKeyboardButton(text="–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="cancel_delete")
            ]
        ])
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
@router.message(MantraRecordingStates.waiting_for_voice)
async def handle_wrong_voice_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –º–∞–Ω—Ç—Ä—ã"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –º–∞–Ω—Ç—Ä–æ–π üéô"
    ) 