# bot/handlers/socratic.py
from aiogram import Router, types, F
from aiogram.types import CallbackQuery

from ..models import SessionLocal, User, Topic, Answer
from ..keyboards import socratic_keyboard

router = Router()

@router.callback_query(F.data == "start_diagnostics")
async def start_diagnostics(query: types.CallbackQuery, state: dict):
    """
    –ó–∞–ø—É—Å–∫ —Å–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º —Ç–µ–º—É –∏ –∑–∞–¥–∞—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    """
    db = SessionLocal()
    user_id = query.from_user.id
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É ¬´–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞¬ª
    topic = Topic(user_id=await User.id_by_telegram(db, user_id), title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    db.add(topic)
    db.commit()
    db.refresh(topic)
    db.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–º—ã –∏ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ state
    state['topic_id'] = topic.id
    questions = [
        "–ß—Ç–æ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ—â—É—â–∞–µ—à—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ‚Äî –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è, –≤ —Ñ–æ–Ω–µ?",
        "–ö–æ–≥–¥–∞ –∏ –≥–¥–µ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –∑–∞–º–µ—Ç–∏–ª(–∞) —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?",
        "–ß—Ç–æ –æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ?",
        "–ö–∞–∫ –æ–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–∏ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è?",
        "–ß–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å, –ø—Ä–æ—Ä–∞–±–∞—Ç—ã–≤–∞—è —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?",
    ]
    state['questions'] = questions
    state['question_idx'] = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(
        questions[0],
        reply_markup=socratic_keyboard(question_index=0, total=len(questions))
    )
    await query.answer()


@router.callback_query(F.data.startswith("answer_"))
async def handle_answer(query: types.CallbackQuery, state: dict):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –ª–∏–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É, –ª–∏–±–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞–Ω—Ç—Ä—ã
    """
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Ç–µ–∫—Å—Ç –∏–∑ callback_data –≤–∏–¥–∞ "answer_0:–ú–æ–π –æ—Ç–≤–µ—Ç"
    idx_str, text = query.data.split(":", 1)
    idx = int(idx_str.split("_")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
    db = SessionLocal()
    answer = Answer(
        topic_id=state['topic_id'],
        question_index=idx,
        answer_text=text
    )
    db.add(answer)
    db.commit()
    db.close()

    questions = state['questions']
    next_idx = idx + 1

    if next_idx < len(questions):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await query.message.edit_text(
            questions[next_idx],
            reply_markup=socratic_keyboard(question_index=next_idx, total=len(questions))
        )
    else:
        # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã ‚Äî –ø—Ä–æ—Å–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–∞–Ω—Ç—Ä—ã
        await query.message.edit_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –º–∞–Ω—Ç—Ä—É.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="ü™Ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞–Ω—Ç—Ä—É", callback_data="generate_mantra")]
            ])
        )

    await query.answer()
