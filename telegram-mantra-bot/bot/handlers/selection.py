from aiogram import Router, types, F
from ..keyboards import (
    request_keyboard,
    voice_subscription_keyboard,
    start_diag_keyboard,
    diagnostics_state_keyboard,
    detailed_state_keyboard,
)
router = Router()

# --- –í–µ—Ç–∫–∞ 1: –î–∞, —É –º–µ–Ω—è –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å ---
@router.callback_query(F.data == "has_request")
async def has_request_handler(query: types.CallbackQuery):
    text = (
        "–û—Ç–ª–∏—á–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Äî ‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        "‚Äî üéô –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–º (–¥–æ 5 –º–∏–Ω—É—Ç) ‚Äî –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞"
    )
    await query.message.answer(text, reply_markup=request_keyboard())
    await query.answer()

@router.callback_query(F.data == "request_text")
async def request_text_handler(query: types.CallbackQuery):
    await query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º:")
    await query.answer()

@router.callback_query(F.data == "enable_voice")
async def enable_voice_handler(query: types.CallbackQuery):
    text = (
        "–ì–æ–ª–æ—Å–æ–º —á–∞—Å—Ç–æ –ø—Ä–æ—â–µ: –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫ –¥—Ä—É–≥—É, —á—Ç–æ —Å–µ–π—á–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç.\n"
        "–ú—ã —Ä–∞—Å—à–∏—Ñ—Ä—É–µ–º, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–¥–∏–º –º–∞–Ω—Ç—Ä—É –ª–∏—á–Ω–æ –ø–æ–¥ –≤–∞—Å."
    )
    await query.message.answer(text, reply_markup=voice_subscription_keyboard())
    await query.answer()

# --- –í–µ—Ç–∫–∞ 2: –•–æ—á—É —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è (—ç–∫—Å–ø—Ä–µ—Å—Å-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞) ---
@router.callback_query(F.data == "explore_inside")
async def explore_inside_handler(query: types.CallbackQuery):
    text = (
        "–¢–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ‚Äî –∫–∞–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ.\n"
        "–ú—ã –≤–º–µ—Å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º, —Å —á–µ–≥–æ —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏ –º–∞–Ω—Ç—Ä—É, –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–º–µ–Ω–Ω–æ –≤–∞–º."
    )
    await query.message.answer(text, reply_markup=start_diag_keyboard())
    await query.answer()

@router.callback_query(F.data == "start_diagnostics")
async def start_diagnostics_handler(query: types.CallbackQuery):
    await query.message.answer(
        "–ß—Ç–æ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ—â—É—â–∞–µ—à—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ‚Äî –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è, –≤ —Ñ–æ–Ω–µ?",
        reply_markup=diagnostics_state_keyboard()
    )
    await query.answer()

@router.callback_query(F.data.in_(["diag_negative", "diag_neutral", "diag_positive"]))
async def diagnostic_state_detail(query: types.CallbackQuery):
    state = query.data
    if state == "diag_negative":
        options = [
            ("üòü –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö", "block_emotion"),
            ("üòû –°–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞, ¬´—è –Ω–µ —Ç–∞–∫–æ–π¬ª", "block_selfesteem"),
            ("üîÅ –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è, –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ", "block_behavior"),
            ("üíî –û—â—É—â–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞, –Ω–µ–ø—Ä–∏–Ω—è—Ç–æ—Å—Ç–∏", "block_relationship"),
            ("üòê –ê–ø–∞—Ç–∏—è, –ø—É—Å—Ç–æ—Ç–∞", "block_meaning"),
            ("üò† –†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–π –≥–Ω–µ–≤", "block_emotion2"),
            ("üò∞ –°—Ç—ã–¥, –≤–∏–Ω–∞, —á—É–≤—Å—Ç–≤–æ ¬´–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏¬ª", "block_selfesteem2"),
        ]
    elif state == "diag_neutral":
        options = [
            ("üå´ –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "block_emotion"),
            ("üò∂ ¬´–ù–∏—á–µ–≥–æ –Ω–µ —á—É–≤—Å—Ç–≤—É—é¬ª / –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ", "block_behavior"),
            ("‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–º, ¬´–∫–∞–∫ –±—É–¥—Ç–æ –≤—Å—ë –ø–æ –∏–Ω–µ—Ä—Ü–∏–∏¬ª", "block_behavior2"),
            ("ü§î –•–æ—á—É –ø–æ–Ω—è—Ç—å, –≤ —á—ë–º —è –∑–∞—Å—Ç—Ä—è–ª(–∞)", "block_behavior3"),
            ("üò¨ –ß—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–æ –Ω–µ –∑–Ω–∞—é —á—Ç–æ", "block_selfesteem"),
            ("üßç –ñ–∏–≤—É ¬´—Ä—è–¥–æ–º —Å —Å–æ–±–æ–π¬ª, –Ω–µ—Ç –≤–∫–ª—é—á—ë–Ω–Ω–æ—Å—Ç–∏", "block_meaning"),
            ("ü§∑ ¬´–í—Ä–æ–¥–µ –≤—Å—ë –Ω–æ—Ä–º, –Ω–æ –ø—É—Å—Ç–æ¬ª", "block_meaning2"),
        ]
    else:  # diag_positive
        options = [
            ("‚ú® –•–æ—á—É –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è", "block_meaning"),
            ("üí° –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –ø–æ—Ä–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "block_selfesteem"),
            ("üå± –í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–º–µ–Ω, –Ω–æ —Ö–æ—á—É —è—Å–Ω–æ—Å—Ç–∏", "block_emotion"),
            ("üîç –ù–∞–±–ª—é–¥–∞—é –∑–∞ —Å–æ–±–æ–π ‚Äî —Ö–æ—á–µ—Ç—Å—è —è—Å–Ω–æ—Å—Ç–∏", "block_behavior"),
            ("üí¨ –•–æ—á—É –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥", "block_relationship"),
            ("üßò –•–æ—á—É –±–æ–ª—å—à–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–ø–æ—Ä—ã, –¥–∞–∂–µ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "block_meaning2"),
            ("üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ: –∫–∞–∫–∏–µ —É –º–µ–Ω—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –ª–æ–≤—É—à–∫–∏?", "block_cbt"),
        ]
    await query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –≤–∞—à–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é:",
        reply_markup=detailed_state_keyboard(options)
    )
    await query.answer()

# @router.callback_query(F.data.regexp(r"^block_"))
# async def start_socratic_by_block(query: types.CallbackQuery):
#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫ –≤ state/context, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
#     await query.message.answer(
#         "–°–ø–∞—Å–∏–±–æ! –°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ì–æ—Ç–æ–≤—å—Ç–µ —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Äî –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç —Å–µ—Ä–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ò–ò ‚ú®"
#     )
#     # –¢—É—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ª–æ–≥ –ø–æ –Ω—É–∂–Ω–æ–º—É –±–ª–æ–∫—É (–ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–∞–ª—å—à–µ)
#     await query.answer()
